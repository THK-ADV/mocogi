
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET           /                                                   controllers.HomeController.index

GET           /me                                                 controllers.MeController.me()

# Git Webhooks

POST          /webhook/onPushEvent                                controllers.GitWebhookController.onPushEvent()
POST          /webhook/onMergeEvent                               controllers.GitWebhookController.onMergeEvent()

# Git

POST          /git/coreFiles                                      controllers.GitController.updateCoreFiles()
POST          /git/moduleFiles                                    controllers.GitController.updateModuleFiles()

# Core

GET           /locations                                          controllers.LocationController.all()
GET           /languages                                          controllers.LanguageController.all()
GET           /status                                             controllers.StatusController.all()
GET           /assessmentMethods                                  controllers.AssessmentMethodController.all()
GET           /moduleTypes                                        controllers.ModuleTypeController.all()
GET           /seasons                                            controllers.SeasonController.all()
GET           /identities                                         controllers.IdentityController.all()
GET           /studyFormTypes                                     controllers.StudyFormTypeController.all()
GET           /pos                                                controllers.POController.all()
GET           /grades                                             controllers.GradeController.all()
GET           /focusAreas                                         controllers.FocusAreaController.all()
GET           /faculties                                          controllers.FacultyController.all()
GET           /globalCriteria                                     controllers.GlobalCriteriaController.all()
GET           /studyPrograms                                      controllers.StudyProgramController.all()
GET           /studyPrograms/view                                 controllers.StudyProgramController.allFromView()
GET           /competences                                        controllers.CompetenceController.all()
GET           /specializations                                    controllers.SpecializationController.all()

# Module Compendium

GET           /moduleCompendium                                   controllers.ModuleCompendiumController.all()
GET           /moduleCompendium/:id                               controllers.ModuleCompendiumController.get(id: java.util.UUID)
GET           /moduleCompendium/:id/staging                       controllers.ModuleCompendiumController.getStaging(id: java.util.UUID)
GET           /moduleCompendium/:id/latest                        controllers.ModuleCompendiumController.getLatest(id: java.util.UUID)
GET           /moduleCompendium/:id/file                          controllers.ModuleCompendiumController.getModuleDescriptionFile(id: java.util.UUID)
GET           /moduleCompendium/:id/staging/file                  controllers.ModuleCompendiumController.getStagingModuleDescriptionFile(id: java.util.UUID)
GET           /moduleCompendium/:id/latest/file                   controllers.ModuleCompendiumController.getLatestModuleDescriptionFile(id: java.util.UUID)

# Module Compendium List
POST          /moduleCompendiums/:semester                        controllers.ModuleCompendiumListController.generate(semester: java.lang.String)
GET           /moduleCompendiums/:semester                        controllers.ModuleCompendiumListController.allFromSemester(semester: java.lang.String)
GET           /moduleCompendiums/preview/:studyProgram/:po        controllers.ModuleCompendiumListController.getPreview(studyProgram: java.lang.String, po: java.lang.String)

# Module

GET           /modules                                            controllers.ModuleController.allModules()
GET           /modules/view                                       controllers.ModuleController.allModulesFromView()
GET           /metadata                                           controllers.ModuleController.allModuleMetadata()

# Module Draft

GET           /moduleDrafts/own                                   controllers.ModuleDraftController.moduleDrafts()
GET           /moduleDrafts/:id/keys                              controllers.ModuleDraftController.keys(id: java.util.UUID)
POST          /moduleDrafts                                       controllers.ModuleDraftController.createNewModuleDraft()
PUT           /moduleDrafts/:id                                   controllers.ModuleDraftController.createOrUpdateModuleDraft(id: java.util.UUID)
DELETE        /moduleDrafts/:id                                   controllers.ModuleDraftController.deleteModuleDraft(id: java.util.UUID)

# Review
POST          /moduleReviews/:id                                  controllers.ModuleDraftReviewController.create(id: java.util.UUID)
DELETE        /moduleReviews/:id                                  controllers.ModuleDraftReviewController.delete(id: java.util.UUID)

# Approval
GET           /moduleApprovals/own                                controllers.ModuleDraftApprovalController.getOwn()
GET           /moduleApprovals/:moduleId                          controllers.ModuleDraftApprovalController.getByModule(moduleId: java.util.UUID)
PUT           /moduleApprovals/:moduleId/:reviewId                controllers.ModuleDraftApprovalController.update(moduleId: java.util.UUID, reviewId: java.util.UUID)

# Module Update Permissions

GET           /moduleUpdatePermissions/own                        controllers.ModuleUpdatePermissionController.getOwn()
GET           /moduleUpdatePermissions/:moduleId                  controllers.ModuleUpdatePermissionController.allByModule(moduleId: java.util.UUID)
POST          /moduleUpdatePermissions/:moduleId                  controllers.ModuleUpdatePermissionController.replace(moduleId: java.util.UUID)

# WPF
POST          /wpfs/:semester                                     controllers.WPFCatalogueController.generate(semester: java.lang.String)
GET           /wpfs                                               controllers.WPFCatalogueController.all()

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                       controllers.Assets.versioned(path="/public", file: Asset)
GET           /files/*file                                        controllers.FileController.get(file: Asset)